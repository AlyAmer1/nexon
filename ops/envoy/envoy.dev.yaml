# Envoy front proxy for local NEXON development.
# - :8080 exposes both REST and gRPC (AUTO codec; gRPC detected via matcher)
# - :9901 exposes the Envoy admin interface

static_resources:
  listeners:
    - name: unified_listener
      address: { socket_address: { address: 0.0.0.0, port_value: 8080 } }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: unified_hcm
                codec_type: AUTO
                use_remote_address: true
                normalize_path: true
                merge_slashes: true
                request_headers_timeout: 5s
                request_timeout: 0s            # Benchmark mode: disable request timeout
                stream_idle_timeout: 0s         # Benchmark mode: disable stream idle timeout
                stream_error_on_invalid_http_message: true

                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                      log_format:
                        json_format:
                          ts: "%START_TIME%"
                          protocol: "%PROTOCOL%"
                          method: "%REQ(:METHOD)%"
                          path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                          authority: "%REQ(:AUTHORITY)%"
                          status: "%RESPONSE_CODE%"
                          grpc_status: "%GRPC_STATUS%"
                          duration_ms: "%DURATION%"
                          upstream_service_time_ms: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"
                          upstream_host: "%UPSTREAM_HOST%"
                          upstream_cluster: "%UPSTREAM_CLUSTER%"
                          response_flags: "%RESPONSE_FLAGS%"
                          content_type: "%REQ(content-type)%"

                route_config:
                  name: unified_routes
                  virtual_hosts:
                    - name: backend
                      domains: ["*"]

                      cors:
                        allow_origin_string_match: [{ prefix: "*" }]
                        allow_methods: "GET, PUT, DELETE, POST, OPTIONS"
                        allow_headers: "*"
                        expose_headers: "*"
                        max_age: "1728000"

                      routes:
                        # gRPC (idiomatic matcher) -> grpc_backend
                        - match: { prefix: "/", grpc: {} }
                          route:
                            cluster: grpc_backend
                            timeout: 0s
                            retry_policy:        # Benchmark mode: disable retries
                              num_retries: 0

                        # Everything else (REST, uploads, web app calls) -> FastAPI
                        - match: { prefix: "/" }
                          route:
                            cluster: rest_backend
                            timeout: 0s          # Benchmark mode: disable request timeout
                            retry_policy:        # Benchmark mode: disable retries
                              num_retries: 0

                http_filters:
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    # REST upstream (FastAPI, HTTP/1.1)
    - name: rest_backend
      type: LOGICAL_DNS
      connect_timeout: 0.5s
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: rest_backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address: { socket_address: { address: 127.0.0.1, port_value: 8000 } }
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http_protocol_options: {}
      health_checks:
        - timeout: 2s
          interval: 60s
          unhealthy_threshold: 2
          healthy_threshold: 2
          http_health_check: { path: /healthz }

    # gRPC upstream (HTTP/2 to the gRPC service)
    - name: grpc_backend
      type: LOGICAL_DNS
      connect_timeout: 0.5s
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: grpc_backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address: { socket_address: { address: 127.0.0.1, port_value: 50051 } }
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: { max_concurrent_streams: 1000 }
      health_checks:
        - timeout: 2s
          interval: 60s
          unhealthy_threshold: 2
          healthy_threshold: 2
          grpc_health_check:
            # empty = overall service health; matches the server defaults
            service_name: ""

admin:
  address: { socket_address: { address: 0.0.0.0, port_value: 9901 } }